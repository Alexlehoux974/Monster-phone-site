const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.vercel' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Variables d\'environnement manquantes!');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? 'PR√âSENT' : 'MANQUANT');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', serviceRoleKey ? 'PR√âSENT' : 'MANQUANT');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function checkAdmin() {
  console.log('üîç V√©rification de la table admin_users...\n');

  // 1. R√©cup√©rer TOUS les admins
  console.log('üìã TOUS les utilisateurs admin:');
  const { data: allAdmins, error: allError } = await supabase
    .from('admin_users')
    .select('*');

  if (allError) {
    console.error('‚ùå Erreur r√©cup√©ration admins:', allError.message);
    return;
  }

  if (!allAdmins || allAdmins.length === 0) {
    console.log('‚ö†Ô∏è  AUCUN admin trouv√© dans la table!');
  } else {
    console.log(`‚úÖ ${allAdmins.length} admin(s) trouv√©(s):\n`);
    allAdmins.forEach((admin, index) => {
      console.log(`${index + 1}. Email: ${admin.email}`);
      console.log(`   ID: ${admin.id}`);
      console.log(`   Actif: ${admin.is_active ? '‚úÖ OUI' : '‚ùå NON'}`);
      console.log(`   R√¥le: ${admin.role}`);
      console.log(`   Cr√©√©: ${admin.created_at}`);
      console.log(`   Derni√®re connexion: ${admin.last_login_at || 'Jamais'}\n`);
    });
  }

  // 2. Chercher sp√©cifiquement alexlehoux@gmail.com
  console.log('üîç Recherche de alexlehoux@gmail.com:');
  const { data: alexAdmin, error: alexError } = await supabase
    .from('admin_users')
    .select('*')
    .eq('email', 'alexlehoux@gmail.com')
    .single();

  if (alexError) {
    if (alexError.code === 'PGRST116') {
      console.log('‚ùå alexlehoux@gmail.com N\'EXISTE PAS dans admin_users!');
      console.log('\nüí° SOLUTION: Cr√©er cet utilisateur admin dans la table admin_users');
    } else {
      console.error('‚ùå Erreur:', alexError.message);
    }
  } else {
    console.log('‚úÖ alexlehoux@gmail.com trouv√©:');
    console.log('   Actif:', alexAdmin.is_active ? '‚úÖ OUI' : '‚ùå NON');
    console.log('   R√¥le:', alexAdmin.role);
  }

  // 3. Chercher dans auth.users
  console.log('\nüîç V√©rification dans auth.users:');
  const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();

  if (authError) {
    console.error('‚ùå Erreur r√©cup√©ration users:', authError.message);
  } else {
    const alexUser = authUsers.users.find(u => u.email === 'alexlehoux@gmail.com');
    if (alexUser) {
      console.log('‚úÖ alexlehoux@gmail.com existe dans auth.users');
      console.log('   User ID:', alexUser.id);
      console.log('   Email confirm√©:', alexUser.email_confirmed_at ? '‚úÖ OUI' : '‚ùå NON');
    } else {
      console.log('‚ùå alexlehoux@gmail.com N\'EXISTE PAS dans auth.users!');
      console.log('\nüí° SOLUTION: Cr√©er cet utilisateur dans Supabase Auth');
    }
  }
}

checkAdmin().catch(console.error);
