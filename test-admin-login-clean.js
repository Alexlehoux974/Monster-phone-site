const { chromium } = require('playwright');

(async () => {
  console.log('üîê Test de connexion admin avec localStorage nettoy√©...\n');

  const browser = await chromium.launch({ headless: true });
  const context = await browser.newContext();
  const page = await context.newPage();

  page.on('console', msg => {
    if (msg.text().includes('[ADMIN') || msg.text().includes('session')) {
      console.log('üìù Console:', msg.text());
    }
  });

  try {
    console.log('1Ô∏è‚É£ Navigation vers /admin/login...');
    await page.goto('https://monster-phone.re/admin/login', {
      waitUntil: 'networkidle',
      timeout: 30000
    });
    console.log('‚úÖ Page de login charg√©e\n');

    // NETTOYER LE LOCALSTORAGE AVANT DE SE CONNECTER
    console.log('üßπ Nettoyage du localStorage...');
    await page.evaluate(() => {
      localStorage.clear();
      console.log('localStorage nettoy√©');
    });
    console.log('‚úÖ localStorage nettoy√©\n');

    console.log('2Ô∏è‚É£ Remplissage du formulaire...');
    await page.fill('input[type="email"]', 'alexlehoux@gmail.com');
    await page.fill('input[type="password"]', 'Monster@phone2025!');
    console.log('‚úÖ Formulaire rempli\n');

    console.log('3Ô∏è‚É£ Soumission du formulaire...');
    await page.click('button[type="submit"]');
    
    await page.waitForURL(/\/admin/, { timeout: 10000 });
    const currentUrl = page.url();
    console.log('‚úÖ Redirection effectu√©e vers:', currentUrl, '\n');

    if (currentUrl.includes('/admin/login')) {
      console.error('‚ùå √âCHEC: Toujours sur la page de login (boucle de redirection)\n');
      await browser.close();
      process.exit(1);
    }

    if (currentUrl.includes('/admin') && !currentUrl.includes('/admin/login')) {
      console.log('‚úÖ SUCC√àS: Connexion r√©ussie et acc√®s au dashboard admin!\n');
    }

    await browser.close();
    process.exit(0);

  } catch (error) {
    console.error('‚ùå Erreur durant le test:', error.message);
    await browser.close();
    process.exit(1);
  }
})();
