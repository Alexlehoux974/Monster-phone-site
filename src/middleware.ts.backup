import { createServerClient } from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';

export async function middleware(request: NextRequest) {
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  });

  // Vérifier si c'est une route admin
  const isAdminRoute = request.nextUrl.pathname.startsWith('/admin');
  const isLoginPage = request.nextUrl.pathname === '/admin/login';

  if (isAdminRoute) {
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return request.cookies.get(name)?.value;
          },
          set(name: string, value: string, options: any) {
            request.cookies.set({
              name,
              value,
              ...options,
            });
            response = NextResponse.next({
              request: {
                headers: request.headers,
              },
            });
            response.cookies.set({
              name,
              value,
              ...options,
            });
          },
          remove(name: string, options: any) {
            request.cookies.set({
              name,
              value: '',
              ...options,
            });
            response = NextResponse.next({
              request: {
                headers: request.headers,
              },
            });
            response.cookies.set({
              name,
              value: '',
              ...options,
            });
          },
        },
      }
    );

    // Vérifier la session
    const {
      data: { session },
    } = await supabase.auth.getSession();

    // Si pas de session et pas sur la page de login, rediriger vers login
    if (!session && !isLoginPage) {
      return NextResponse.redirect(new URL('/admin/login', request.url));
    }

    // Si session existe, vérifier que c'est un admin via l'API
    if (session) {
      try {
        const verifyResponse = await fetch(new URL('/api/admin/verify', request.url), {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email: session.user.email }),
        });

        const verifyData = await verifyResponse.json();

        // Si pas admin et pas sur la page de login, rediriger vers login
        if (!verifyResponse.ok || !verifyData.isAdmin) {
          if (!isLoginPage) {
            await supabase.auth.signOut();
            return NextResponse.redirect(new URL('/admin/login', request.url));
          }
        }

        // Si admin et sur la page de login, rediriger vers dashboard
        if (verifyResponse.ok && verifyData.isAdmin && isLoginPage) {
          return NextResponse.redirect(new URL('/admin', request.url));
        }
      } catch (error) {
        console.error('Middleware admin verification error:', error);
        if (!isLoginPage) {
          return NextResponse.redirect(new URL('/admin/login', request.url));
        }
      }
    }
  }

  return response;
}

export const config = {
  matcher: ['/admin/:path*'],
};
